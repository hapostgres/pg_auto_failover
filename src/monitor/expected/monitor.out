-- Copyright (c) Microsoft Corporation. All rights reserved.
-- Licensed under the PostgreSQL License.
\x on
select *
  from pgautofailover.register_node('default', 'localhost', 9876, 'postgres');
-[ RECORD 1 ]---------------+-------
assigned_node_id            | 1
assigned_group_id           | 0
assigned_group_state        | single
assigned_candidate_priority | 100
assigned_replication_quorum | t
assigned_node_name          | node_1

select *
  from pgautofailover.set_node_system_identifier(1, 6852685710417058800);
-[ RECORD 1 ]--------
node_id   | 1
node_name | node_1
node_host | localhost
node_port | 9876

-- node_1 reports single
select *
  from pgautofailover.node_active('default', 1, 0,
                                  current_group_role => 'single');
-[ RECORD 1 ]---------------+-------
assigned_node_id            | 1
assigned_group_id           | 0
assigned_group_state        | single
assigned_candidate_priority | 100
assigned_replication_quorum | t

-- register node_2
select *
  from pgautofailover.register_node('default', 'localhost', 9877, 'postgres');
-[ RECORD 1 ]---------------+-------------
assigned_node_id            | 2
assigned_group_id           | 0
assigned_group_state        | wait_standby
assigned_candidate_priority | 100
assigned_replication_quorum | t
assigned_node_name          | node_2

-- node_2 reports wait_standby already
select *
  from pgautofailover.node_active('default', 2, 0,
                                  current_group_role => 'wait_standby');
-[ RECORD 1 ]---------------+-------------
assigned_node_id            | 2
assigned_group_id           | 0
assigned_group_state        | wait_standby
assigned_candidate_priority | 100
assigned_replication_quorum | t

-- node_1 reports single again, and gets assigned wait_primary
select *
  from pgautofailover.node_active('default', 1, 0,
                                  current_group_role => 'single');
-[ RECORD 1 ]---------------+-------------
assigned_node_id            | 1
assigned_group_id           | 0
assigned_group_state        | wait_primary
assigned_candidate_priority | 100
assigned_replication_quorum | t

-- node_1 now reports wait_primary
select *
  from pgautofailover.node_active('default', 1, 0,
                                  current_group_role => 'wait_primary');
-[ RECORD 1 ]---------------+-------------
assigned_node_id            | 1
assigned_group_id           | 0
assigned_group_state        | wait_primary
assigned_candidate_priority | 100
assigned_replication_quorum | t

-- node_2 now reports wait_standby, gets assigned catchingup
select *
  from pgautofailover.node_active('default', 2, 0,
                                  current_group_role => 'wait_standby');
-[ RECORD 1 ]---------------+-----------
assigned_node_id            | 2
assigned_group_id           | 0
assigned_group_state        | catchingup
assigned_candidate_priority | 100
assigned_replication_quorum | t

-- register node_3 concurrently to node2 (probably) doing pg_basebackup
select *
  from pgautofailover.register_node('default', 'localhost', 9879, 'postgres');
-[ RECORD 1 ]---------------+-------------
assigned_node_id            | 3
assigned_group_id           | 0
assigned_group_state        | wait_standby
assigned_candidate_priority | 100
assigned_replication_quorum | t
assigned_node_name          | node_3

select formationid, nodename, goalstate, reportedstate
  from pgautofailover.node;
-[ RECORD 1 ]-+-------------
formationid   | default
nodename      | node_1
goalstate     | wait_primary
reportedstate | wait_primary
-[ RECORD 2 ]-+-------------
formationid   | default
nodename      | node_2
goalstate     | catchingup
reportedstate | wait_standby
-[ RECORD 3 ]-+-------------
formationid   | default
nodename      | node_3
goalstate     | wait_standby
reportedstate | init

table pgautofailover.formation;
-[ RECORD 1 ]--------+---------
formationid          | default
kind                 | pgsql
dbname               | postgres
opt_secondary        | t
number_sync_standbys | 1

-- dump the pgautofailover.node table, omitting the timely columns
  select formationid, nodeid, groupid, nodehost, nodeport,
         goalstate, reportedstate, reportedpgisrunning, reportedrepstate
    from pgautofailover.node
order by nodeid;
-[ RECORD 1 ]-------+-------------
formationid         | default
nodeid              | 1
groupid             | 0
nodehost            | localhost
nodeport            | 9876
goalstate           | wait_primary
reportedstate       | wait_primary
reportedpgisrunning | t
reportedrepstate    | unknown
-[ RECORD 2 ]-------+-------------
formationid         | default
nodeid              | 2
groupid             | 0
nodehost            | localhost
nodeport            | 9877
goalstate           | catchingup
reportedstate       | wait_standby
reportedpgisrunning | t
reportedrepstate    | unknown
-[ RECORD 3 ]-------+-------------
formationid         | default
nodeid              | 3
groupid             | 0
nodehost            | localhost
nodeport            | 9879
goalstate           | wait_standby
reportedstate       | init
reportedpgisrunning | t
reportedrepstate    | async

select * from pgautofailover.get_primary('unknown formation');
ERROR:  group has no writable node right now
select * from pgautofailover.get_primary(group_id => -10);
ERROR:  group has no writable node right now
select * from pgautofailover.get_primary();
-[ RECORD 1 ]---+----------
primary_node_id | 1
primary_name    | node_1
primary_host    | localhost
primary_port    | 9876

select * from pgautofailover.get_primary('default', 0);
-[ RECORD 1 ]---+----------
primary_node_id | 1
primary_name    | node_1
primary_host    | localhost
primary_port    | 9876

select * from pgautofailover.get_other_nodes(1);
-[ RECORD 1 ]---+----------
node_id         | 2
node_name       | node_2
node_host       | localhost
node_port       | 9877
node_lsn        | 0/0
node_is_primary | f
-[ RECORD 2 ]---+----------
node_id         | 3
node_name       | node_3
node_host       | localhost
node_port       | 9879
node_lsn        | 0/0
node_is_primary | f

-- remove the primary node
select pgautofailover.remove_node(1);
-[ RECORD 1 ]--
remove_node | t

table pgautofailover.formation;
-[ RECORD 1 ]--------+---------
formationid          | default
kind                 | pgsql
dbname               | postgres
opt_secondary        | t
number_sync_standbys | 0

select pgautofailover.remove_node(1, force => 'true');
-[ RECORD 1 ]--
remove_node | t

-- dump the pgautofailover.node table, omitting the timely columns
  select formationid, nodeid, groupid, nodehost, nodeport,
         goalstate, reportedstate, reportedpgisrunning, reportedrepstate
    from pgautofailover.node
order by nodeid;
-[ RECORD 1 ]-------+-------------
formationid         | default
nodeid              | 2
groupid             | 0
nodehost            | localhost
nodeport            | 9877
goalstate           | report_lsn
reportedstate       | wait_standby
reportedpgisrunning | t
reportedrepstate    | unknown
-[ RECORD 2 ]-------+-------------
formationid         | default
nodeid              | 3
groupid             | 0
nodehost            | localhost
nodeport            | 9879
goalstate           | report_lsn
reportedstate       | init
reportedpgisrunning | t
reportedrepstate    | async

select *
  from pgautofailover.set_node_system_identifier(2, 6852685710417058800);
-[ RECORD 1 ]--------
node_id   | 2
node_name | node_2
node_host | localhost
node_port | 9877

-- should fail as there's no primary at this point
select pgautofailover.perform_failover();
ERROR:  couldn't find the primary node in formation "default", group 0
